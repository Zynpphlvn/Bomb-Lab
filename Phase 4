Notice that the code is similar to phase 3:
input: 1 9
Dump of assembler code for function phase_4:
=> 0x000000000040101c <+0>:     sub    $0x18,%rsp     //makes stack frame
   0x0000000000401020 <+4>:     lea    0x8(%rsp),%rcx  //second input = %rcx
   0x0000000000401025 <+9>:     lea    0xc(%rsp),%rdx    //first input = %rdx
   0x000000000040102a <+14>:    mov    $0x4027a5,%esi   //format of answer: %d %d
   0x000000000040102f <+19>:    mov    $0x0,%eax    
   0x0000000000401034 <+24>:    callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000401039 <+29>:    cmp    $0x2,%eax
   0x000000000040103c <+32>:    jne    0x401045 <phase_4+41>    // if NOT equal to 2 jump to explode bomb
   0x000000000040103e <+34>:    cmpl   $0xe,0xc(%rsp)           //0xe =14
   0x0000000000401043 <+39>:    jbe    0x40104a <phase_4+46>     //if first input < 14, skip bomb
   0x0000000000401045 <+41>:    callq  0x401574 <explode_bomb>
   
   0x000000000040104a <+46>:    mov    $0xe,%edx                  //%edx = 14
   0x000000000040104f <+51>:    mov    $0x0,%esi              //%esi = 0
   0x0000000000401054 <+56>:    mov    0xc(%rsp),%edi       //%edi = first input
   
   0x0000000000401058 <+60>:    callq  0x400fde <func4>     //calls <func4>
   0x000000000040105d <+65>:    cmp    $0x5,%eax            //%eax is from <func4>
   0x0000000000401060 <+68>:    jne    0x401069 <phase_4+77>
   0x0000000000401062 <+70>:    cmpl   $0x5,0x8(%rsp)
   0x0000000000401067 <+75>:    je     0x40106e <phase_4+82> //if 5 == second input DONE
   0x0000000000401069 <+77>:    callq  0x401574 <explode_bomb>
   0x000000000040106e <+82>:    add    $0x18,%rsp
   0x0000000000401072 <+86>:    retq   
End of assembler dump.

Lets see whats being stored in 0xc(%rsp) at <+34> and in %rsp+8: 
(gdb) x/d $rsp+12
0x7fffffffe4ac: 1

(gdb) x/d $rsp+8
0x7fffffffe4a8: 9

$rsp+12 holds our first input. $rsp+8 holds our second input. From above, it seems we want our first input to be between 2 and 14

We have to compare %eax from <func4>. Lets see whats going on in <func4>
result = %rax, ecx= t1; first input = %edi, edx is 14 when passed in, %esi = 0

Dump of assembler code for function func4:
=> 0x0000000000400fde <+0>:     sub    $0x8,%rsp      //makes stack frame
   0x0000000000400fe2 <+4>:     mov    %edx,%eax        //eax = 14
   0x0000000000400fe4 <+6>:     sub    %esi,%eax      //eax = eax - esi; eax = 14-0 --> 14
   0x0000000000400fe6 <+8>:     mov    %eax,%ecx      //ecx = 14
   0x0000000000400fe8 <+10>:    shr    $0x1f,%ecx     //0x1f = 31; ecx = 14 >>31; returns most sigfig bit --> 0
   0x0000000000400feb <+13>:    add    %ecx,%eax      //eax = eax + ecx; eax = 14 + 0 = 14
   0x0000000000400fed <+15>:    sar    %eax           //eax = eax >> 1; 14 >> 1 --> same as eax/2
   0x0000000000400fef <+17>:    lea    (%rax,%rsi,1),%ecx   //ecx = eax + rsi --> ecx = 7
  
   0x0000000000400ff2 <+20>:    cmp    %edi,%ecx            //first input VS ecx
   0x0000000000400ff4 <+22>:    jle    0x401002 <func4+36> //if 7 <= first input, jump pass recursion call
   0x0000000000400ff6 <+24>:    lea    -0x1(%rcx),%edx       //edx = rcx - 1
   0x0000000000400ff9 <+27>:    callq  0x400fde <func4>  //back to beginning
  
   0x0000000000400ffe <+32>:    add    %eax,%eax
   0x0000000000401000 <+34>:    jmp    0x401017 <func4+57>
  
   0x0000000000401002 <+36>:    mov    $0x0,%eax      //eax = 0
   0x0000000000401007 <+41>:    cmp    %edi,%ecx      //ecx = 7; first input vs 7
   0x0000000000401009 <+43>:    jge    0x401017 <func4+57>  //%ecx >= edi --> 7 >= first input
   
   0x000000000040100b <+45>:    lea    0x1(%rcx),%esi       //%esi = 1 + %rcx --> %esi = 1 + 7 = 8 WE ARE INCREMENTING rcx each time
   0x000000000040100e <+48>:    callq  0x400fde <func4>  //goes back to beginning
   0x0000000000401013 <+53>:    lea    0x1(%rax,%rax,1),%eax
   
   0x0000000000401017 <+57>:    add    $0x8,%rsp    //WE ARE RETURNING BACK EAX which we want to be 5
   0x000000000040101b <+61>:    retq   
End of assembler dump.

//Solution
We know our number needs to be between 2 and 14 and this problem involves recursion. We also know that the last input needs to be 5. So 
our format for the answer is "x 5". I just plugged in numbers from 1-14 for the first input and 10 worked well. So answer is 10 5
